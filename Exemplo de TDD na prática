# TDD na Pr√°tica: Classe Cliente em Java

Este guia mostra o processo passo a passo do desenvolvimento orientado a testes (TDD) para uma classe `Cliente`, utilizando **Java** e o framework **JUnit**.

---

## ‚ú® Vis√£o Geral do TDD

> **TDD = Red ‚Üí Green ‚Üí Refactor**
>
> 1. **Red:** Escreve um teste que falha.
> 2. **Green:** Implementa o m√≠nimo para o teste passar.
> 3. **Refactor:** Refatora o c√≥digo mantendo os testes verdes.

---

## üîß 1. Preparando o Ambiente

**Requisitos:**
- JDK 17+
- JUnit 5
- Um projeto com estrutura semelhante a:

```
/src/main/java/com/exemplo/Cliente.java
/src/test/java/com/exemplo/ClienteTest.java
```

Se estiver usando Maven, adicione no `pom.xml`:

```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>5.10.0</version>
    <scope>test</scope>
</dependency>
```

---

## üî¥ 2. Primeiro Teste: Criar Cliente (Red)

Arquivo: `ClienteTest.java`

```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ClienteTest {

    @Test
    public void deveCriarClienteComNomeEmail() {
        Cliente cliente = new Cliente("Gabriel", "gabriel@email.com");

        assertEquals("Gabriel", cliente.getNome());
        assertEquals("gabriel@email.com", cliente.getEmail());
    }
}
```

> Esse teste vai falhar inicialmente, porque a classe `Cliente` ainda n√£o existe.

---

## üîµ 3. Implementa o M√≠nimo (Green)

Arquivo: `Cliente.java`

```java
public class Cliente {
    private String nome;
    private String email;

    public Cliente(String nome, String email) {
        this.nome = nome;
        this.email = email;
    }

    public String getNome() {
        return nome;
    }

    public String getEmail() {
        return email;
    }
}
```

Rode os testes. Se tudo passar, voc√™ est√° no **Green**.

---

## ‚öíÔ∏è 4. Refatorar (Refactor)

Aqui ainda n√£o h√° necessidade de refatorar, mas j√° podemos pensar em futuras melhorias: tornar a classe `record` se for imut√°vel, validar dados com objetos de valor, etc.

---

## üìÑ 5. Validar E-mail

### Teste:

```java
@Test
public void naoDevePermitirEmailInvalido() {
    assertThrows(IllegalArgumentException.class, () -> {
        new Cliente("Gabriel", "email_invalido");
    });
}
```

### Implementa valida√ß√£o:

```java
public Cliente(String nome, String email) {
    if (!email.matches("^[^@\s]+@[^@\s]+\\.[^@\s]+$")) {
        throw new IllegalArgumentException("Email inv√°lido");
    }
    this.nome = nome;
    this.email = email;
}
```

---

## üìÖ 6. Nome Obrigat√≥rio

### Teste:

```java
@Test
public void naoDevePermitirNomeVazio() {
    assertThrows(IllegalArgumentException.class, () -> {
        new Cliente("", "gabriel@email.com");
    });
}
```

### Implementa:

```java
if (nome == null || nome.trim().isEmpty()) {
    throw new IllegalArgumentException("Nome obrigat√≥rio");
}
```

---

## üß∞ Considera√ß√µes Finais

### Testes Criados:
- `deveCriarClienteComNomeEmail()`
- `naoDevePermitirEmailInvalido()`
- `naoDevePermitirNomeVazio()`

### Benef√≠cios do TDD:
- Cria√ß√£o guiada pelas regras de neg√≥cio.
- Feedback r√°pido.
- C√≥digo mais confi√°vel.
- Melhor design emergente.

---

Se quiser evoluir, pr√≥ximos passos:
- Validar CPF
- Adicionar persist√™ncia fake ou mockada
- Criar servi√ßos que manipulam clientes com testes

Pronto para subir esse projeto como base para um m√≥dulo de clientes real.

---

